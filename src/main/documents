
* **Overview**
* **Features**
* **Class-wise Explanation**
* **Flow of Execution**
* **Future Enhancements**

Here’s the documentation 👇

---

# 📘 Quiz Management System – Documentation

## 1. Project Overview

This is a **console-based Java application** designed to simulate a **quiz system** where:

* **Mentors** can add questions, view all questions with correct answers, view student results, and preload a set of 10 predefined questions.
* **Students** can register with their ID and Name, view quiz questions (without answers), and attempt the quiz. Their results (marks and grade) are recorded by the Mentor.

The system runs entirely on the **console** using a **menu-driven approach**.

---

## 2. Features

### 🔹 Mentor Features

* Add new questions (with 4 options and correct answer).
* Display total number of questions.
* Display all questions with correct answers.
* Display all student results (name, ID, score, grade).
* Preload 10 random sample questions.

### 🔹 Student Features

* Register with Name and ID.
* View all quiz questions (without answers).
* Attempt the quiz.
* Automatically get results recorded in Mentor’s records.

### 🔹 Quiz Features

* Each question has **4 options (A, B, C, D)**.
* Only **valid inputs (A, B, C, D)** are allowed.
* Marks are awarded instantly after validation.
* **Grade Analysis**:

  * 0–30% → ❌ Fail
  * 31–50% → C Grade
  * 51–80% → B Grade
  * 81–100% → A Grade

---

## 3. Class-wise Explanation

### 📍 `Question`

Represents a single question in the quiz.

* Attributes: `Qid`, `Qname`, `Option1–4`, `CorrectOption`, `Answer`.
* Methods:

  * `Questiondisplay()` → Displays the question and enforces valid answer input (A/B/C/D).
  * `answerValidator()` → Checks if student’s answer matches the correct option.

---

### 📍 `QuestionService`

Manages all questions and quiz logic.

* Attributes: `questions[]`, `marks`, `totalMarks`.
* Methods:

  * `addQuestion()` → Adds new questions (auto-generated IDs).
  * `preloadQuestions()` → Loads 10 predefined questions.
  * `startQuiz()` → Iterates through questions, validates answers, calculates marks.
  * `gradeAnalyzer()` → Returns grade based on percentage.

---

### 📍 `Mentor`

Handles Mentor-related actions.

* Methods:

  * `addQuestions()` → Add new questions.
  * `displayTotalQuestions()` → Show total questions added.
  * `displayAllQuestionsWithAnswers()` → Show all questions with correct answers.
  * `displayAllStudentResults()` → Show all recorded student results.
  * `recordStudentResult(StudentResult result)` → Store student result after quiz.

---

### 📍 `Student`

Handles Student-related actions.

* Attributes: `sid`, `sname`.
* Methods:

  * `displayQuestions()` → Displays all questions without correct answers.
  * `startQuiz()` → Starts quiz and generates `StudentResult`.

---

### 📍 `StudentResult`

Stores result of a student after quiz.

* Attributes: `studentId`, `studentName`, `score`, `grade`.
* Used by Mentor to track results.

---

### 📍 `Menu`

The **controller class** that provides the **menu-driven interface**.

* Main menu: Mentor / Student / Exit.
* Mentor menu: Add Questions, Display Questions, View Student Results, Preload Questions.
* Student menu: Display Questions, Start Quiz.

---

### 📍 `MainClass`

The entry point of the application.

* Contains `main()` method.
* Creates `Menu` object and starts the application.

---

## 4. Flow of Execution

1. Program starts → `MainClass` → `Menu.start()`.
2. User selects:

   * **Mentor** → Mentor Menu
   * **Student** → Student Menu
   * **Exit** → Program ends.
3. Mentor can **add or preload questions**.
4. Student registers and starts quiz.
5. Student’s result is recorded in Mentor’s record.
6. Mentor can later review results.

---

## 5. Example Output

```
====== MAIN MENU ======
1. Mentor
2. Student
3. Exit
Enter your choice: 1

====== MENTOR MENU ======
1. Add Questions
2. Display Total Questions
3. Display All Questions with Answers
4. Display All Student Results
5. Load Preloaded 10 Questions
6. Back to Main Menu
Enter your choice: 5

✅ 10 Preloaded Questions Added!
```

```
====== STUDENT MENU ======
1. Display Questions (without answers)
2. Start Quiz
3. Back to Main Menu
Enter your choice: 2

Enter Student ID: S01
Enter Student Name: John

1. What is the capital of France?
A. Berlin
B. Paris
C. Madrid
D. Rome

Please select the Option (A/B/C/D): B
Your Option B is recorded!!

✅ Correct Answer!

Final Score: 9/10
Grade: A
```

---

## 6. Future Enhancements

* Save student results to a file or database.
* Add multiple quiz subjects (Math, Science, GK).
* Timer for each question.
* Random shuffle of questions.
* GUI interface (JavaFX or Swing).

---

✅ With this documentation, your project is **clear, professional, and ready for presentation or submission**.

Do you want me to also **create a UML diagram** (Class Diagram + Flowchart) for this project? That will make your documentation look even more professional.
